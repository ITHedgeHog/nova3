{
	"cancel": "Cancel",
	"description": "Description",
	"edit": "Edit",
	"email-address": "Email Address",
	"key": "Key",
	"name": "Name",
	"password": "Password",
	"password-new": "New Password",
	"password-new-confirm": "Confirm New Password",
	"remove": "Remove",
	"sign-in": "Sign In",
	"sign-out": "Sign Out",
	"welcome-back": "Welcome back, $1!",

	"abbr-uri": "URI",

	"phrase-add": "Add $1",
	"phrase-edit": "Edit $1",
	"phrase-manage": "Manage $1",
	"phrase-not-found": "No $1 were found.",
	"phrase-remove": "Remove $1",
	"phrase-update": "Update $1",

	"signin-attempts": "Too Many Attempts!",
	"signin-attempts-explain": "You've attempted to sign in too many times. Please try again in $1 seconds.",
	"signin-back-home": "Back Home",
	"signin-failed": "Sign In Failed!",
	"signin-failed-explain": "The email address or password don't match our records.",
	"signin-forgot-password": "Forgot Your Password?",
	"signin-required-reset": "Password Reset Required",
	"signin-required-reset-explain": "An administrator has required you to reset your password before you can continue.",
	"signin-reset-password": "Reset Password",
	"signin-send-reset-link": "Send Password Reset Link",
	"signin-success": "You are now signed in",

	"pages-add": "Add a Page",
	"pages-advanced": "Advanced Page",
	"pages-basic": "Basic Page",
	"pages-filter": "Filter pages by name, key, URI, or verb",
	"pages-info": "Page Info",
	"pages-key-explain": "Keys are used to identify your pages and create dynamic links to them. Even if the URI of the page changes, using the key to build links means those links will continue to work as long as the key doesn't change. Keys <strong>must be</strong> unique.",
	"pages-manage-content": "Manage Page Content",
	"pages-remove": "Remove Page",
	"pages-uri-advanced-explain": "URIs identify and describe the resource (in this case, a page) that's being accessed with the following format: <code>foo/bar</code>. You can also specify variables in your URIs to use in code by wrapping the name of the variable in braces: <code>foo/bar/{id}</code>. In your code, you'd then pass <code>$id</code> as a parameter to the method and be able to use whatever value is in the URI at that segment. Optional variables are indicated by a trailing question mark: <code>foo/bar/{id?}</code> and in your code, should have a default value to prevent errors. The only restriction around URIs with advanced pages is that they <strong>cannot</strong> have the same URI as another page.",
	"pages-uri-basic-explain": "URIs identify and describe the resource (in this case, a page) that's being accessed with the following format: <code>foo/bar</code>. The only restrictions around URIs with basic pages is that they <strong>cannot</strong> have the same URI as another page and <strong>cannot</strong> use variables.",
	"pages-uri-conditions": "URI Conditions",
	"pages-uri-conditions-explain": "You can more closely control the content that can be put into URI parameters by defining conditions on any of the variables. URI conditions are period-delimited with the name of the variable first followed by the regular expression you want to use for evaluating the parameter: <code>name.[A-Za-z]+</code>. If you have multiple conditions for a URI, you can separate them with pipes: <code>name.[A-Za-z]+|id.[0-9]+</code>.",
	"pages-verb": "HTTP Verb",
	"pages-verb-delete": "DELETE",
	"pages-verb-get": "GET",
	"pages-verb-post": "POST",
	"pages-verb-put": "PUT",
	"pages-verb-popup-delete-explain": "Pretty self-explanatory, but a DELETE request takes a given resource and tells the server it wants to remove it from the server or database.",
	"pages-verb-popup-get-explain": "Simply put, a GET request, well, <em>gets</em> data from a server. In most cases, a GET request should only retrieve data.",
	"pages-verb-popup-intro": "HTTP defines methods (often referred to as <em>verbs</em>) to indicate action to be taken on a specific resource.",
	"pages-verb-popup-post-explain": "A POST request actually sends data to the server and expects something back. Most often this is used for submitting forms to create data on the server or in the database.",
	"pages-verb-popup-put-explain": "If the URI refers to an already existing resource, a PUT request takes its data and tries to replace that data for the specific resource. This is most often used for updating existing pieces of data on the server or in the database.",
	"pages-verb-question": "What Are HTTP Verbs?"
}
