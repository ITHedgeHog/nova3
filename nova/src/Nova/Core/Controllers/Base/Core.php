<?php namespace Nova\Core\Controllers\Base;

/**
 * All controllers in Nova (except the Ajax controller) extend from this core
 * controller. This class is responsible for setting up the controller and 
 * handling the post processing of a request.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @package		Nova
 * @subpackage	Core
 * @category	Controllers
 * @author		Anodyne Productions
 * @copyright	2013 Anodyne Productions
 */

use App;
use Nav;
use Str;
use Nova;
use View;
use Cache;
use Route;
use Config;
use Request;
use Session;
use Location;
use Markdown;
use Redirect;
use stdClass;
use Exception;
use Controller;
use SystemModel;

abstract class Core extends Controller {

	/**
	 * The application container.
	 */
	protected $app;

	/**
	 * A View object for storing the template.
	 */
	public $template;

	/**
	 * All of the setting values from the database.
	 */
	public $settings;

	/**
	 * The Site Content repository.
	 */
	public $content;
	
	/**
	 * Icon information from the icon indices.
	 */
	public $icons;

	/**
	 * The genre.
	 */
	public $genre;
	
	/**
	 * The current skin.
	 */
	public $skin;
	
	/**
	 * The current rank set.
	 */
	public $rank;
	
	/**
	 * The current timezone.
	 */
	public $timezone;

	/**
	 * The auth binding.
	 */
	public $auth;

	/**
	 * The currently logged in user.
	 */
	public $currentUser;

	/**
	 * The Nav object.
	 */
	public $nav;

	/**
	 * The Request instance.
	 */
	public $request;

	/**
	 * Name of the view file to use.
	 */
	protected $view = 'processing';
	
	/**
	 * Controller action data.
	 */
	protected $data;
	
	/**
	 * Name of the JavaScript view file to use.
	 */
	protected $jsView;
	
	/**
	 * Controller action data for the JavaScript view.
	 */
	protected $jsData;

	/**
	 * Array of flash messages
	 */
	public $_flash = [];

	/**
	 * Array of ajax views
	 */
	public $_ajax = [];

	/**
	 * The skin section catalog object
	 */
	public $_skinInfo;
	
	/**
	 * Array of headers that can be used by the pages.
	 */
	public $_headers = [];
	
	/**
	 * Array of messages that can be used by the pages.
	 */
	public $_messages = [];
	
	/**
	 * Array of titles that can be used by the pages.
	 */
	public $_titles = [];

	/**
	 * The current mode.
	 */
	protected $mode = false;

	/**
	 * Whether the header and message are editable.
	 */
	protected $editable = true;

	/**
	 * The controller used for the current request.
	 */
	protected $controller;

	/**
	 * The action method used for the current request.
	 */
	protected $action;

	/**
	 * The controller used for the current request with namespace.
	 */
	protected $fullController;

	/**
	 * The action method used for the current request with HTTP verb.
	 */
	protected $fullAction;

	/**
	 * Stop execution (used specifically for filters)
	 */
	protected $_stopExecution = false;

	public function __construct()
	{
		// Resolve the bindings
		$this->auth = Nova::resolveBinding('NovaAuthInterface');
		$this->content = Nova::resolveBinding('SiteContentRepositoryInterface');

		// Set the current user
		$this->currentUser = $this->auth->getUser();

		// Get the application container
		$this->app = App::make('app');

		// Set the controller and action names
		$this->getControllerName();
		$this->getActionName();

		// Get a copy of the controller
		$me = $this;

		/**
		 * Before closure that checks the install status.
		 */
		$this->beforeFilter(function() use (&$me)
		{
			// Get the system install status cache file
			$status = Cache::get('nova.installed');

			if ($status === null)
			{
				try
				{
					// Grab the UID
					$uid = SystemModel::getUniqueId();

					// Only cache if we have a UID
					if ( ! empty($uid))
					{
						Cache::forever('nova.installed', (int) true);
					}
				}
				catch (Exception $e)
				{
					$me->_stopExecution = true;
					
					// Nothing here, so the system isn't installed
					return Redirect::to('setup');
				}
			}
		});

		/**
		 * Before closure that handles the setup of each request.
		 */
		$this->beforeFilter(function() use (&$me)
		{
			if ( ! $me->_stopExecution)
			{
				// Set the Request instance
				$me->request = Request::instance();

				// Set the genre
				$me->genre = Config::get('nova.genre');

				// Resolve the interfaces
				$settings = Nova::resolveBinding('SettingsRepositoryInterface');

				// Load all of the settings
				$me->settings = $settings->all()->toSimpleObject('key', 'value');

				# TODO: need to figure out how we're going to handle languages

				// Create a new Nav object
				$me->nav = new Nav;

				// Create empty objects for the data
				$me->data = new stdClass;
				$me->jsData = new stdClass;
				$me->_skinInfo = new stdClass;

				// Grab the content for the current section
				$me->_headers	= $me->content->findBySection('header', Str::lower($me->_controller));
				$me->_messages	= $me->content->findBySection('message', Str::lower($me->_controller));
				$me->_titles	= $me->content->findBySection('title', Str::lower($me->_controller));
			}
		});
	}

	/**
	 * Finalize the layout.
	 *
	 * @return	void
	 */
	protected function finalizeLayout()
	{
		if ( ! is_object($this->layout)) return;

		// Set the content view (if it's been set)
		if ( ! empty($this->view))
		{
			$this->layout->template->content = View::make(Location::page($this->view))
				->with('_icons', $this->icons)
				->with('_settings', $this->settings)
				->with('_currentUser', $this->currentUser)
				->with('_auth', $this->auth)
				->with((array) $this->data);
		}
		
		// Set the javascript view (if it's been set)
		if ( ! empty($this->jsView))
		{
			$this->layout->javascript = View::make(Location::js($this->jsView))
				->with('_icons', $this->icons)
				->with('_currentUser', $this->currentUser)
				->with('_auth', $this->auth)
				->with((array) $this->jsData);
		}

		// Set the final title content
		$this->layout->title.= $this->parseSiteContent('title', false);
		
		// Set the final header content
		$this->layout->template->header = $this->parseSiteContent('header', false);

		// Set the final message content
		$this->layout->template->message = $this->parseSiteContent('message', true);

		if ($this->editable)
		{
			// Set the final header content key
			$this->layout->template->headerKey = (array_key_exists($this->action, $this->_headers)) 
				? $this->controller.'_'.$this->action.'_header' 
				: false;

			// Set the final message content key
			$this->layout->template->messageKey = (array_key_exists($this->action, $this->_messages)) 
				? $this->controller.'_'.$this->action.'_message' 
				: false;
		}

		// If there's flash data in the session, grab it
		if (Session::has('flashStatus'))
		{
			$this->_flash[] = [
				'class'		=> 'alert-'.Session::get('flashStatus'),
				'content'	=> Session::get('flashMessage'),
			];
		}
		
		// Flash messages
		if (count($this->_flash) > 0)
		{
			foreach ($this->_flash as $flash)
			{
				$this->layout->template->flash.= partial('common/alert', $flash);
			}
		}

		// Ajax views
		if (count($this->_ajax) > 0)
		{
			foreach ($this->_ajax as $ajax)
			{
				$this->layout->template->ajax.= $ajax;
			}
		}
	}

	/**
	 * Process a controller action response.
	 *
	 * This overrides the Laravel default controller functionality so
	 * we can finalize the layout before its sent to the response.
	 *
	 * @param  \Illuminate\Routing\Router  $router
	 * @param  string  $method
	 * @param  mixed   $response
	 * @return Symfony\Component\HttpFoundation\Response
	 */
	protected function processResponse($router, $method, $response)
	{
		$this->finalizeLayout();

		return parent::processResponse($router, $method, $response);
	}
	
	/**
	 * Every controller can pull information out of the wiki database
	 * by simply calling the page action and passing a link as the
	 * 3rd parameter. Like wiki pages, these are completely static
	 * and don't have access to any information out of the database.
	 *
	 * @param	mixed	A numeric page ID or page permalink
	 * @return	void
	 */
	public function getPage($link)
	{
		if (is_numeric($link))
		{
			/**
			 * Find the page based on the wiki page_id. If there isn't
			 * a page with that ID, return an error. If there is a page
			 * with that ID but it isn't classified as being in the
			 * current section, redirect them to that section. Otherwise,
			 * display the page.
			 */
		}
		else
		{
			/**
			 * Find the page based on the wiki page_permalink. If there isn't
			 * a page with that link, return an error. If there is a page
			 * with that link but it isn't classified as being in the
			 * current section, redirect them to that section. Otherwise,
			 * display the page.
			 */
		}
	}

	/**
	 * Make sure the action name is setup properly.
	 *
	 * @return	void
	 */
	protected function getActionName()
	{
		// Set the fully qualified action name
		$this->fullAction = $actionName = Str::parseCallback(Route::currentRouteAction(), false)[1];

		// Remove the HTTP verb
		$actionName = (substr($actionName, 0, 3) == 'get')
			? substr_replace($actionName, '', 0, 3)
			: $actionName;
		$actionName = (substr($actionName, 0, 3) == 'put')
			? substr_replace($actionName, '', 0, 3)
			: $actionName;
		$actionName = (substr($actionName, 0, 4) == 'post')
			? substr_replace($actionName, '', 0, 4)
			: $actionName;
		$actionName = (substr($actionName, 0, 6) == 'delete')
			? substr_replace($actionName, '', 0, 6)
			: $actionName;

		// Set the short action name
		$this->action = Str::lower($actionName);
	}

	/**
	 * Make sure the controller name is setup properly.
	 *
	 * @return	void
	 */
	protected function getControllerName()
	{
		// Set the namespaced controller name
		$this->fullController = Str::parseCallback(Route::currentRouteAction(), false)[0];

		// Set the controller name
		$this->controller = Str::denamespace($this->fullController);
	}

	/**
	 * Parse the site content for the titles, headers and messages.
	 *
	 * @param	string	$type		The type of content we're parsing
	 * @param	bool	$markdown	Are we parsing markdown?
	 * @return	string
	 */
	protected function parseSiteContent($type, $markdown = false)
	{
		//s($this->_headers);
		// If the data coming from the controller action has a
		// title/header/message variable, use that instead of what we have
		if (is_object($this->data) and property_exists($this->data, $type))
		{
			if ($markdown)
			{
				return Markdown::parse($this->data->{$type});
			}

			return $this->data->{$type};
		}

		// Figure out the variables we should be using based on the type
		switch ($type)
		{
			case 'title':
				$typeVar = '_titles';
			break;

			case 'header':
				$typeVar = '_headers';
			break;

			case 'message':
				$typeVar = '_messages';
			break;
		}

		// Check if we have a mode
		if ($this->mode !== false and array_key_exists("{$this->action}.{$this->mode}", $this->{$typeVar}))
		{
			if ($markdown)
			{
				return Markdown::parse($this->{$typeVar}["{$this->action}.{$this->mode}"]);
			}

			return $this->{$typeVar}["{$this->action}.{$this->mode}"];
		}

		// Check if we have something already
		if (array_key_exists($this->action, $this->{$typeVar}))
		{
			if ($markdown)
			{
				return Markdown::parse($this->{$typeVar}[$this->action]);
			}

			return $this->{$typeVar}[$this->action];
		}

		return null;
	}

}